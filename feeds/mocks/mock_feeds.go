// Code generated by MockGen. DO NOT EDIT.
// Source: feeds/interfaces.go

// Package mock_feeds is a generated GoMock package.
package mock_feeds

import (
	big "math/big"
	reflect "reflect"
	time "time"

	types "github.com/ethereum/go-ethereum/core/types"
	etherclient "github.com/forta-network/core-go/etherclient"
	gomock "github.com/golang/mock/gomock"
)

// MockLogFeed is a mock of LogFeed interface.
type MockLogFeed struct {
	ctrl     *gomock.Controller
	recorder *MockLogFeedMockRecorder
}

// MockLogFeedMockRecorder is the mock recorder for MockLogFeed.
type MockLogFeedMockRecorder struct {
	mock *MockLogFeed
}

// NewMockLogFeed creates a new mock instance.
func NewMockLogFeed(ctrl *gomock.Controller) *MockLogFeed {
	mock := &MockLogFeed{ctrl: ctrl}
	mock.recorder = &MockLogFeedMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogFeed) EXPECT() *MockLogFeedMockRecorder {
	return m.recorder
}

// AddAddress mocks base method.
func (m *MockLogFeed) AddAddress(newAddr string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddAddress", newAddr)
}

// AddAddress indicates an expected call of AddAddress.
func (mr *MockLogFeedMockRecorder) AddAddress(newAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockLogFeed)(nil).AddAddress), newAddr)
}

// ForEachLog mocks base method.
func (m *MockLogFeed) ForEachLog(handler func(*etherclient.Block, types.Log) error, finishBlockHandler func(*etherclient.Block) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForEachLog", handler, finishBlockHandler)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForEachLog indicates an expected call of ForEachLog.
func (mr *MockLogFeedMockRecorder) ForEachLog(handler, finishBlockHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForEachLog", reflect.TypeOf((*MockLogFeed)(nil).ForEachLog), handler, finishBlockHandler)
}

// ForEachLogPolling mocks base method.
func (m *MockLogFeed) ForEachLogPolling(interval time.Duration, handler func(*etherclient.Block, types.Log) error, finishBlockHandler func(*etherclient.Block) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForEachLogPolling", interval, handler, finishBlockHandler)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForEachLogPolling indicates an expected call of ForEachLogPolling.
func (mr *MockLogFeedMockRecorder) ForEachLogPolling(interval, handler, finishBlockHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForEachLogPolling", reflect.TypeOf((*MockLogFeed)(nil).ForEachLogPolling), interval, handler, finishBlockHandler)
}

// GetLogsForLastBlocks mocks base method.
func (m *MockLogFeed) GetLogsForLastBlocks(blocksAgo int64) ([]types.Log, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogsForLastBlocks", blocksAgo)
	ret0, _ := ret[0].([]types.Log)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogsForLastBlocks indicates an expected call of GetLogsForLastBlocks.
func (mr *MockLogFeedMockRecorder) GetLogsForLastBlocks(blocksAgo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogsForLastBlocks", reflect.TypeOf((*MockLogFeed)(nil).GetLogsForLastBlocks), blocksAgo)
}

// GetLogsForRange mocks base method.
func (m *MockLogFeed) GetLogsForRange(blockStart, blockEnd *big.Int) ([]types.Log, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogsForRange", blockStart, blockEnd)
	ret0, _ := ret[0].([]types.Log)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogsForRange indicates an expected call of GetLogsForRange.
func (mr *MockLogFeedMockRecorder) GetLogsForRange(blockStart, blockEnd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogsForRange", reflect.TypeOf((*MockLogFeed)(nil).GetLogsForRange), blockStart, blockEnd)
}
