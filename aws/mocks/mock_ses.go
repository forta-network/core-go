// Code generated by MockGen. DO NOT EDIT.
// Source: aws/ses.go

// Package mock_aws is a generated GoMock package.
package mock_aws

import (
	context "context"
	reflect "reflect"

	ses "github.com/aws/aws-sdk-go-v2/service/ses"
	gomock "github.com/golang/mock/gomock"
)

// MockSESClient is a mock of SESClient interface.
type MockSESClient struct {
	ctrl     *gomock.Controller
	recorder *MockSESClientMockRecorder
}

// MockSESClientMockRecorder is the mock recorder for MockSESClient.
type MockSESClientMockRecorder struct {
	mock *MockSESClient
}

// NewMockSESClient creates a new mock instance.
func NewMockSESClient(ctrl *gomock.Controller) *MockSESClient {
	mock := &MockSESClient{ctrl: ctrl}
	mock.recorder = &MockSESClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSESClient) EXPECT() *MockSESClientMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockSESClient) SendEmail(ctx context.Context, params *ses.SendEmailInput, optFns ...func(*ses.Options)) (*ses.SendEmailOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendEmail", varargs...)
	ret0, _ := ret[0].(*ses.SendEmailOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockSESClientMockRecorder) SendEmail(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockSESClient)(nil).SendEmail), varargs...)
}
